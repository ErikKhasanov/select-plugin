{"mappings":"AAGe,sBC0BCA,EAAUC,GAClBC,KAAKC,GAAKC,SAASC,cAAcL,GACjCE,KAAKD,QAAUA,EACfC,KAAKI,WAAa,KAClBJ,MAAKK,IACLL,MAAKM,IAGTD,KACI,MAAOE,YAAAA,EAAWC,KAAEA,EAAIJ,WAAEA,GAAcJ,KAAKD,QAC7CC,KAAKC,GAAGQ,UAvCC,EAAIF,EAAaC,EAAMJ,KACpC,IAAIM,EAAOH,EACX,MAAMI,EAAQH,EAAKI,KAAIC,IACnB,IAAIC,EAAM,GAMV,OAJKV,IAAgBS,EAAKE,KACtBL,EAAOG,EAAKG,MACZF,EAAM,0BAEJ,2BAA4BA,kCAAoCD,EAAKE,MAAMF,EAAKG,gBAE1F,MAAM,+HAIUN,8IAIIC,EAAMM,KAAK,2JAoBPC,CAAYX,EAAaC,EAAMJ,GAGvDE,KACIN,KAAKmB,aAAenB,KAAKmB,aAAaC,KAAKpB,MAC3CA,KAAKC,GAAGoB,iBAAiB,QAASrB,KAAKmB,cACvCnB,KAAKsB,YAAcpB,SAASC,cAAc,uBAC1CH,KAAKW,MAAQT,SAASqB,iBAAiB,sBAG3CJ,aAAaK,GACT,MAAOC,KAAAA,GAAQD,EAAME,OAAOC,QACf,UAATF,EACAzB,KAAK4B,SACW,SAATH,GACPzB,KAAKW,MAAMkB,SAAQhB,GAAQA,EAAKiB,UAAUC,OAAO,4BACjDP,EAAME,OAAOI,UAAUE,IAAI,0BAC3BhC,KAAKiC,OAAOT,EAAME,OAAOC,QAAQX,QACjB,aAATS,GACPzB,KAAKkC,QAIbD,OAAOlB,GACHf,KAAKI,WAAaW,EAClBf,KAAKsB,YAAYa,YAAcnC,KAAKoC,QAAQpB,MAC5ChB,KAAKD,QAAQsC,UAAWrC,KAAKD,QAAQsC,SAASrC,KAAKoC,SACnDpC,KAAKkC,QAGTN,SACQ5B,KAAKsC,OACLtC,KAAKkC,QAGTlC,KAAKuC,OAGLH,cACA,OAAOpC,KAAKD,QAAQS,KAAKgC,MAAK3B,IAASA,EAAKE,KAAQf,KAAKI,aAGzDkC,aACA,OAAOtC,KAAKC,GAAG6B,UAAUW,SAAS,gBAGtCF,OACIvC,KAAKC,GAAG6B,UAAUE,IAAI,gBAG1BE,QACIlC,KAAKC,GAAG6B,UAAUC,OAAO,gBAG7BW,UACI1C,KAAKC,GAAG0C,oBAAoB,QAAS3C,KAAKmB,cAC1CnB,KAAKC,GAAGQ,UAAY,KD5FF,UAAW,CACjCF,YAAa,mBAEbC,KAAM,CACF,CAACO,GAAI,EAAGC,MAAO,SACf,CAACD,GAAI,EAAGC,MAAO,gBACf,CAACD,GAAI,EAAGC,MAAO,WACf,CAACD,GAAI,EAAGC,MAAO,OACf,CAACD,GAAI,EAAGC,MAAO,WAEnBqB,SAASxB,GACL+B,QAAQC,IAAIhC","sources":["src/index.js","src/select/select.js"],"sourcesContent":["import {Select} from \"./select/select\";\r\nimport './select/select.scss';\r\n\r\nconst select = new Select('#select', {\r\n    placeholder: 'Выбери из списка',\r\n    // selectedId: '4',\r\n    data: [\r\n        {id: 1, value: 'React'},\r\n        {id: 2, value: 'React Native'},\r\n        {id: 3, value: 'Angular'},\r\n        {id: 4, value: 'Vue'},\r\n        {id: 5, value: 'Svelte'}\r\n    ],\r\n    onSelect(item) {\r\n        console.log(item)\r\n    }\r\n});","const getTemplate = (placeholder, data, selectedId) => {\r\n    let text = placeholder\r\n    const items = data.map(item => {\r\n        let cls = ''\r\n\r\n        if (+selectedId === +item.id) {\r\n            text = item.value\r\n            cls = 'select__item__selected'\r\n        }\r\n        return `<li class=\"select__item ${cls}\" data-type=\"item\" data-value=${item.id}>${item.value}</li>`\r\n    })\r\n    return (\r\n        `\r\n         <div id=\"select\" class=\"select\">\r\n              <div class=\"select__input\" data-type=\"input\">\r\n                  ${text}\r\n              </div>\r\n              <div class=\"select__dropdown\">\r\n                   <ul class=\"select__list\">\r\n                      ${items.join('')}\r\n                   </ul>\r\n              </div>\r\n              <div class=\"select__backdrop\" data-type=\"backdrop\"></div>\r\n         </div>\r\n        `\r\n    )\r\n}\r\n\r\nexport class Select {\r\n    constructor(selector, options) {\r\n        this.el = document.querySelector(selector)\r\n        this.options = options\r\n        this.selectedId = null\r\n        this.#render()\r\n        this.#setup()\r\n    }\r\n\r\n    #render() {\r\n        const {placeholder, data, selectedId} = this.options\r\n        this.el.innerHTML = getTemplate(placeholder, data, selectedId)\r\n    }\r\n\r\n    #setup() {\r\n        this.clickHandler = this.clickHandler.bind(this)\r\n        this.el.addEventListener('click', this.clickHandler)\r\n        this.placehodler = document.querySelector('[data-type=\"input\"]')\r\n        this.items = document.querySelectorAll('[data-type=\"item\"]')\r\n    }\r\n\r\n    clickHandler(event) {\r\n        const {type} = event.target.dataset;\r\n        if (type === 'input') {\r\n            this.toggle()\r\n        } else if (type === 'item') {\r\n            this.items.forEach(item => item.classList.remove('select__item__selected'))\r\n            event.target.classList.add('select__item__selected')\r\n            this.select(event.target.dataset.value)\r\n        } else if (type === 'backdrop'){\r\n            this.close()\r\n        }\r\n    }\r\n\r\n    select(id) {\r\n        this.selectedId = id\r\n        this.placehodler.textContent = this.current.value\r\n        this.options.onSelect ? this.options.onSelect(this.current) : ''\r\n        this.close()\r\n    }\r\n\r\n    toggle() {\r\n        if (this.isOpen) {\r\n            this.close()\r\n            return\r\n        }\r\n        this.open()\r\n    }\r\n\r\n    get current() {\r\n        return this.options.data.find(item => +item.id === +this.selectedId)\r\n    }\r\n\r\n    get isOpen() {\r\n        return this.el.classList.contains('select__open')\r\n    }\r\n\r\n    open() {\r\n        this.el.classList.add('select__open')\r\n    }\r\n\r\n    close() {\r\n        this.el.classList.remove('select__open')\r\n    }\r\n\r\n    destroy() {\r\n        this.el.removeEventListener('click', this.clickHandler)\r\n        this.el.innerHTML = ''\r\n    }\r\n}"],"names":["selector","options","this","el","document","querySelector","selectedId","render","setup","placeholder","data","innerHTML","text","items","map","item","cls","id","value","join","$7f11ace4236306ad$var$getTemplate","clickHandler","bind","addEventListener","placehodler","querySelectorAll","event","type","target","dataset","toggle","forEach","classList","remove","add","select","close","textContent","current","onSelect","isOpen","open","find","contains","destroy","removeEventListener","console","log"],"version":3,"file":"index.e5ae497f.js.map"}